{"version":3,"sources":["components/Navbar.js","components/SortingAlgoDetails.js","components/SortingAlgoBar.js","components/Sorting.js","components/PathFinderGrid.js","components/PathFinder.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","onAlgoChange","onChange","e","algoDetails","className","href","onClick","SortingAlgoDetails","algo","resetArray","startSorting","changeSpeed","changeSize","sizeSliderVal","speedSliderVal","type","min","max","value","letMeGoOut","newSpeed","SortingAlgoBar","array","sortingStatus","replaceSortedArray","mergeSort","A","start","end","MSA","mid","Math","floor","p","push","temp","q","merge","quickSort","QSA","piv_pos","i","piv","j","partition","heapify","arr","n","largest","l","r","SA","concat","delay","delayInms","Promise","resolve","setTimeout","showSorting","animations","a","length","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","backgroundColor","transition","height","useEffect","slice","k","bubbleSort","insertionSort","console","log","heapSort","map","idx","Sorting","useState","setArray","setSortingStatus","setSizeSliderVal","setSpeedSliderVal","rarray","random","display","flexDirection","target","sort","b","PathFinderGrid","nodes","row","rowIdx","node","nodeIdx","PathFinder","setNodes","grid","currentRow","col","currentNode","getInitialGrid","App","setAlgo","newAlgo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.097ba6cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = ({onAlgoChange}) => {\r\n\r\n    function onChange(e,algoDetails) {\r\n        onAlgoChange(algoDetails);\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar-horizontal\">\r\n            <div className=\"navbar-block\">\r\n                <div className=\"dropdown navbar-block-btn\" href=\"javascript:void(0);\">\r\n                    <div className=\"dropbtn\">Sorting</div>\r\n                    <div className=\"dropdown-content\">\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['sort','Merge Sort'])}>Merge Sort</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['sort','Quick Sort'])}>Quick Sort</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['sort','Heap Sort'])}>Heap Sort</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['sort','Bubble Sort'])}>Bubble Sort</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['sort','Insertion Sort'])}>Insertion Sort</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"navbar-block\">\r\n                <div className=\"dropdown navbar-block-btn\" href=\"javascript:void(0);\">\r\n                    <div className=\"dropbtn\">Path Finding</div>\r\n                    <div className=\"dropdown-content\">\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['path-finding',\"Dijkstra's Algorithm\"])}>Dijkstra's Algorithm</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['path-finding',\"A* Search\"])}>A* Search</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['path-finding',\"Greedy Best-first Search\"])}>Greedy Best-first Search</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['path-finding',\"Swarm Algorithm\"])}>Swarm Algorithm</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['path-finding',\"Convergent Swarm Algorithm\"])}>Convergent Swarm Algorithm</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['path-finding',\"Bidirectional Swarm Algorithm\"])}>Bidirectional Swarm Algorithm</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['path-finding',\"Breath-first Search\"])}>Breath-first Search</a>\r\n                        <a href=\"javascript:void(0);\" onClick={(e) =>onChange(e,['path-finding',\"Deapth-first Search\"])}>Deapth-first SearchS</a>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { useState } from 'react';\r\n\r\nconst SortingAlgoDetails = ({algo,resetArray,startSorting,changeSpeed,changeSize,sizeSliderVal,speedSliderVal}) => {\r\n    return (\r\n        <div className=\"algo-details\">\r\n            <div className=\"algo-details-block\">{algo[1]}</div>\r\n            <div className=\"algo-details-block\">\r\n                <a href=\"javascript:void(0);\" onClick={resetArray}>New Array</a>  \r\n            </div>\r\n            <div className=\"algo-details-block\">\r\n                Size\r\n                <input className=\"size-speed\" type=\"range\" min=\"4\" max=\"100\" value={sizeSliderVal} onChange={changeSize}></input>\r\n            </div>\r\n            <div className=\"algo-details-block\">\r\n                Time\r\n                <input className=\"size-speed\" type=\"range\" min=\"4\" max=\"1000\" value={speedSliderVal} onChange={changeSpeed}></input>\r\n            </div>\r\n            <div className=\"algo-details-block\">\r\n                <a href=\"javascript:void(0);\" onClick={startSorting}>Start</a>  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SortingAlgoDetails","import React, { useEffect } from 'react';\r\nlet letMeGoOut = false;\r\nlet newSpeed = 4;\r\nconst SortingAlgoBar = ({algo,array,sortingStatus,speedSliderVal,replaceSortedArray}) => {\r\n\r\n    useEffect(() => {\r\n        if(sortingStatus===true){\r\n            letMeGoOut = false;\r\n            newSpeed = speedSliderVal;\r\n            if(algo[1]===\"Bubble Sort\"){\r\n                showSorting(bubbleSort());\r\n            }\r\n            else if(algo[1]===\"Insertion Sort\"){\r\n                showSorting(insertionSort());\r\n            }\r\n            else if(algo[1]===\"Merge Sort\"){\r\n                var A = array.slice(0); \r\n                var MSA = [];\r\n                mergeSort(A,0,A.length-1,MSA);\r\n                showSorting(MSA);\r\n            }\r\n            else if(algo[1]===\"Heap Sort\"){\r\n                showSorting(heapSort());\r\n            }\r\n            else if(algo[1]===\"Quick Sort\"){\r\n                var A = array.slice(0); \r\n                var QSA = [];\r\n                quickSort(A,0,A.length-1,QSA);\r\n                showSorting(QSA);\r\n            }\r\n        }\r\n        else{\r\n            letMeGoOut = true;\r\n        }\r\n    },[sortingStatus]);\r\n\r\n    useEffect(() => {\r\n        newSpeed = speedSliderVal;\r\n    },[speedSliderVal]); \r\n\r\n    function merge(A,start,mid,end,MSA) {\r\n        var p = start;\r\n        while(p<mid){\r\n            MSA.push([1,p,mid]);\r\n            if(A[p]>A[mid]){\r\n                MSA.push([2,p,mid,A[mid],A[p]]);\r\n                var temp = A[p];\r\n                A[p] = A[mid];\r\n                A[mid] = temp;\r\n                var q = mid;\r\n                if(q<=end-1){\r\n                    MSA.push([1,q,q+1]);\r\n                }\r\n                while(q<=end-1 && A[q]>A[q+1]){\r\n                    MSA.push([2,q,q+1,A[q+1],A[q]]);\r\n                    var temp = A[q];\r\n                    A[q] = A[q+1];\r\n                    A[q+1] = temp; \r\n                    q++;\r\n                    if(q+1<=end-1){\r\n                        MSA.push([1,q+1,q+2]);\r\n                    }\r\n                }\r\n            }\r\n            p++;\r\n        }\r\n    }\r\n\r\n    function mergeSort(A,start,end,MSA){\r\n        if( start < end ) {\r\n            var mid = Math.floor(( start + end ) / 2);           \r\n            mergeSort( A , start , mid , MSA ) ;                \r\n            mergeSort( A , mid+1 , end , MSA ) ;            \r\n            merge( A , start , mid+1 , end, MSA ); \r\n        }\r\n    }\r\n\r\n    function quickSort(A,start,end,QSA){\r\n        if( start < end ) {\r\n            var piv_pos = partition (A,start , end ,QSA) ;     \r\n            quickSort(A,start , piv_pos -1,QSA);    \r\n            quickSort(A,piv_pos +1 , end,QSA) ;\r\n        }\r\n    }\r\n\r\n    function partition(A,start,end,QSA) {\r\n        var i = start + 1;\r\n        var piv = A[start];\r\n        for(var j =start + 1; j <= end ; j++ )  {\r\n            QSA.push([1,start,j]);\r\n            if( A[ j ] < piv){\r\n                QSA.push([2,i,j,A[j],A[i]]);\r\n                var temp = A[ i ];\r\n                A[ i ] = A [ j ];\r\n                A [ j ] = temp;\r\n                i += 1;\r\n            }\r\n        }\r\n        QSA.push([2,i-1,start,A[start],A[i-1]]);\r\n        var temp = A[i-1];\r\n        A[i-1] = A[ start ];\r\n        A[ start ] = temp;\r\n        return i-1;\r\n    }\r\n\r\n    function bubbleSort(){\r\n        var A = array.slice(0); \r\n        var temp;\r\n        var n = A.length;\r\n        var SA = [];\r\n        for(let k = 0; k< n-1; k++) {\r\n            for(let i = 0; i < n-k-1; i++) {\r\n                SA.push([1,i,i+1]);\r\n                if(A[ i ] > A[ i+1] ) {\r\n                    SA.push([2,i,i+1,A[i+1],A[i]]);\r\n                    temp = A[ i ];\r\n                    A[ i ] = A[ i+1 ];\r\n                    A[ i + 1] = temp;\r\n                }\r\n            }\r\n        }\r\n        return SA;\r\n    }\r\n\r\n    function insertionSort(){\r\n        var A = array.slice(0); \r\n        var temp;\r\n        var n = A.length;\r\n        var SA = [];\r\n        for( let i = 0 ;i < n ; i++ ) {\r\n            temp = A[ i ];    \r\n            let j = i;\r\n            if(j>0){\r\n                SA.push([1,j,j-1]);\r\n            }\r\n            while(  j > 0  && temp < A[ j -1]) {\r\n                SA.push([2,j,j-1,A[j-1],temp]);\r\n                A[ j ] = A[ j-1];   \r\n                j = j - 1;\r\n                if(j>0){\r\n                    SA.push([1,j,j-1]);\r\n                }\r\n            }\r\n            A[ j ] = temp;    \r\n        }\r\n        return SA;\r\n    }\r\n\r\n    function heapify(arr, n, i){\r\n        var largest = i;  //Initialize largest as root\r\n        var l = 2 * i + 1;     \r\n        var r = 2 * i + 2 ;   \r\n        let SA = [];\r\n        //See if left child of root exists and is\r\n        //greater than root\r\n        if(l < n){\r\n            SA.push([1,largest,l]);\r\n        }\r\n        if(l < n && arr[largest] < arr[l]){\r\n            largest = l;\r\n        }\r\n        //See if right child of root exists and is\r\n        //greater than root\r\n        if(r < n){\r\n            SA.push([1,i,r]);\r\n        }\r\n        if(r < n && arr[largest] < arr[r]){\r\n            largest = r\r\n        }\r\n        //Change root, if needed\r\n        if(largest != i){\r\n            SA.push([2,i,largest,arr[largest],arr[i]]);\r\n            var temp = arr[i];\r\n            arr[i] = arr[largest];\r\n            arr[largest] = temp;\r\n            //Heapify the root.\r\n            SA = SA.concat(heapify(arr, n, largest))\r\n        }\r\n        return SA;\r\n    }\r\n \r\n    function heapSort(){\r\n        var A = array.slice(0);\r\n        var n = A.length;\r\n        let SA = [];\r\n        for(var i = (n/2)-1; i>-1;i--){ \r\n            SA = SA.concat(heapify(A, n, i))\r\n        }\r\n        console.log(SA);\r\n        //One by one extract elements\r\n        for(var i = n-1; i>0;i--){\r\n            SA.push([2,i,0,A[0],A[i]]);\r\n            var temp = A[i];\r\n            A[i] = A[0];\r\n            A[0] = temp;     \r\n            SA = SA.concat(heapify(A, i, 0))\r\n        }\r\n        return SA;\r\n    }\r\n\r\n    function delay(delayInms) {\r\n        return new Promise(resolve => {\r\n          setTimeout(() => {\r\n            resolve(2);\r\n          }, delayInms);\r\n        });\r\n    }\r\n\r\n    async function showSorting(animations) {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            if(letMeGoOut){\r\n                break;\r\n            }\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (animations[i][0] == 1) {\r\n                const barOneIdx = animations[i][1];\r\n                const barTwoIdx = animations[i][2];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                barOneStyle.backgroundColor = \"cyan\";\r\n                barTwoStyle.backgroundColor = \"cyan\";\r\n                let delayres = await delay(newSpeed);\r\n                barOneStyle.backgroundColor = \"#333\";\r\n                barTwoStyle.backgroundColor = \"#333\";\r\n                if(letMeGoOut){\r\n                    break;\r\n                }\r\n            } else{\r\n                const barOneIdx = animations[i][1];\r\n                const barTwoIdx = animations[i][2];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                barOneStyle.transition = \"height \"+newSpeed+\"ms\";\r\n                barTwoStyle.transition = \"height \"+newSpeed+\"ms\";\r\n                barOneStyle.height = `${animations[i][3]}px`;\r\n                barTwoStyle.height = `${animations[i][4]}px`;\r\n                barOneStyle.backgroundColor = \"#FFA500\";\r\n                barTwoStyle.backgroundColor = \"#FFA500\";\r\n                let delayres = await delay(newSpeed);\r\n                barOneStyle.transition = \"none\";\r\n                barTwoStyle.transition = \"none\";\r\n                barOneStyle.backgroundColor = \"#333\";\r\n                barTwoStyle.backgroundColor = \"#333\";\r\n                if(letMeGoOut){\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        replaceSortedArray();\r\n    }\r\n \r\n  return (\r\n    <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n            <div className=\"array-bar\" style={{ backgroundColor: \"#333\",  height: `${value}px`,}} key={idx}></div>\r\n        ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SortingAlgoBar","import React, { useState, useEffect } from 'react';\r\nimport SortingAlgoDetails from './SortingAlgoDetails';\r\nimport SortingAlgoBar from './SortingAlgoBar';\r\nconst Sorting = ({algo}) => {\r\n\r\n    const [array, setArray] = useState([]);\r\n    const [sortingStatus, setSortingStatus] = useState(false);\r\n    const [sizeSliderVal, setSizeSliderVal] = useState(50);\r\n    const [speedSliderVal, setSpeedSliderVal] = useState(300);\r\n\r\n    function changeSize(value) {\r\n        setSortingStatus(false);\r\n        setSizeSliderVal(value.target.value);\r\n        resetArray();\r\n    }\r\n    function changeSpeed(value) {\r\n        setSpeedSliderVal(value.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    },[]); \r\n\r\n    useEffect(() => {\r\n        setSortingStatus(false);\r\n    },[algo]); \r\n        \r\n    function resetArray(){\r\n        setSortingStatus(false);\r\n        const rarray = [];\r\n        for (let i = 0; i < sizeSliderVal; i++) {\r\n        rarray.push(randomIntFromInterval(10, 500));\r\n        }\r\n        setArray(rarray);\r\n    }\r\n\r\n    function randomIntFromInterval(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    function startSorting() {\r\n        setSortingStatus(true);\r\n    }\r\n    \r\n    function replaceSortedArray(){\r\n        setArray(array.sort(function(a, b){return a - b}));\r\n        setSortingStatus(false);\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection : \"column\",}}>\r\n            <SortingAlgoDetails sizeSliderVal={sizeSliderVal} speedSliderVal={speedSliderVal} algo={algo} resetArray={resetArray} startSorting={startSorting} changeSpeed = {changeSpeed} changeSize = {changeSize}/>\r\n            <SortingAlgoBar algo={algo} array={array} sortingStatus={sortingStatus} speedSliderVal={speedSliderVal} replaceSortedArray={replaceSortedArray} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sorting","import React, { useEffect } from 'react';\r\n\r\nconst PathFinderGrid = ({algo,nodes}) => {\r\n    \r\n \r\n    return (\r\n        <div className=\"grid-container\">\r\n            {nodes.map((row,rowIdx)=>{\r\n                return <div key={rowIdx} className=\"grid\">\r\n                    {row.map((node,nodeIdx)=><div className={`grid-box${node[3] ? ' node-finish' : node[2] ? ' node-start' :''}` }></div>)}\r\n                    </div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PathFinderGrid","import React, { useState, useEffect } from 'react';\r\nimport SortingAlgoDetails from './SortingAlgoDetails';\r\nimport PathFinderGrid from  './PathFinderGrid';\r\n\r\nconst PathFinder = ({algo}) => {\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getInitialGrid();\r\n    },[]); \r\n\r\n    useEffect(() => {\r\n        // setSortingStatus(false);\r\n    },[algo]); \r\n    \r\n    function getInitialGrid (){\r\n        const grid = [];\r\n        for (let row = 0; row < 20; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < 50; col++) {\r\n                    const isStart= row === 10 && col === 5;\r\n                    const isFinish= row === 10 && col === 45;\r\n                    const currentNode=[\r\n                        col,\r\n                        row,\r\n                        isStart,\r\n                        isFinish\r\n                    ];\r\n                currentRow.push(currentNode);\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        setNodes(grid);\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection : \"column\",}}>\r\n            <PathFinderGrid algo={algo} nodes={nodes}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PathFinder","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Sorting from './components/Sorting';\nimport PathFinder from './components/PathFinder';\nfunction App() {\n\n  const [algo, setAlgo] = useState(['sort','Merge Sort']);\n\n  function onAlgoChange(newAlgo) {\n    setAlgo(newAlgo);\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar onAlgoChange={onAlgoChange}/>\n      { \n        algo[0] == 'sort' ? <Sorting algo={algo} />:<PathFinder algo={algo} />\n      }\n    </div> \n  );\n}\n\nexport default App;\n\n\n\n\n\n\n      \n    \n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}